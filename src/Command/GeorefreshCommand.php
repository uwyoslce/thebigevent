<?php
/**
 * Created by PhpStorm.
 * User: bkovach
 * Date: 9/8/18
 * Time: 10:52 PM
 */

namespace App\Command;


use App\Model\Entity\Job;
use App\Model\Entity\Meta;
use Cake\Console\Arguments;
use Cake\Console\Command;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Http\Client;

/**
 * Class RefreshGeoCommand
 * @package Command
 * @property Jobs
 * @property App\Model\Entity\Meta
 */
class GeorefreshCommand extends Command
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Jobs');
        $this->loadModel('Meta');


    }

    protected function buildOptionParser(ConsoleOptionParser $parser)
    {
        $parser->addOption('job_id', [
            'help' => "Specify a job id to clear geodata for."
        ]);

        return $parser;
    }

    public function execute(Arguments $args, ConsoleIo $io)
    {
        $job_id = $args->getOption('job_id');

        if( $job_id ) {
            $this->deleteGeoMeta( $this->Jobs->findByJobId($job_id), $io );
        } else {
            $this->deleteGeoMeta( $this->Jobs->find('all'), $io );
        }
    }

    private function deleteGeoMeta($jobs, ConsoleIo $io) {
        $toSave = [];
        foreach($jobs as $job) {
            $io->out("Processing " . $job->address);

            $this->Meta->deleteAll([
                'model' => 'Jobs',
                'model_id' => $job->job_id,
                'meta_key IN' => ['latitude', 'longitude']
            ]);

            $http = new Client();
            // ?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY
            $resp = $http->get("https://maps.googleapis.com/maps/api/geocode/json", [
                "address" => $job->address,
                "key" => 'AIzaSyBgZ6r9iFVt0Drqst8qgAwggfPi7I3iQ7M'
            ]);

            $result = $resp->json;

            if( $result['results'][0]['geometry']['location'] ) {
                $location =  $result['results'][0]['geometry']['location'] ;
                array_push($toSave,
                    $this->Meta->newEntity([
                        'model' => "Jobs",
                        'model_id' => $job->job_id,
                        'meta_key' => 'latitude',
                        'meta_value' => $location['lat']
                    ]),
                    $this->Meta->newEntity([
                        'model' => "Jobs",
                        'model_id' => $job->job_id,
                        'meta_key' => 'longitude',
                        'meta_value' => $location['lng']
                    ])
                );

                $io->out("\t...queued for update");
            } else {
                $io->error("\t...done, with errors.");
            }
        }
        if( !empty($toSave) ) {

            $this->Meta->saveMany($toSave);
        }
    }
}