<?php

namespace App\Controller;


use App\Model\Entity\Group;
use Cake\ORM\TableRegistry;
use Cake\Network\Exception\BadRequestException;
use Cake\Network\Exception\ForbiddenException;

/**
 * Class GroupsController
 * @package App\Controller
 * @property \App\Model\Table\GroupsTable $Groups
 */
class GroupsController extends AppController {

	function isAuthorized( $user ) {
		$perms = [
			'create' => [
				'committee' => true,
				'volunteer' => true,
				'admin' => true,
			],
			'manage' => [
				'committee' => true,
				'volunteer' => true,
				'admin' => true,
			],
			'join' => [
				'volunteer' => true,
				'committee' => true,
				'admin' => true,
			],
			'merge' => [
				'admin' => true,
				'committee' => true,
			],
			'index' => [
				'admin' => true,
				'committee' => true,
			],
			'me' => [
				'volunteer' => true,
				'committee' => true,
				'admin' => true,
			]
		];

		if( isset( $perms[ $this->request->getParam('action') ][ $user['role'] ]) ) {
			return $perms[ $this->request->getParam('action') ][ $user['role'] ];
		}

		return parent::isAuthorized( $user ); // TODO: Change the autogenerated stub
	}

	private function ensureGroupHasOwner(Group $group) {
		if( isset($group->users) ) {

		} else {
			throw new \InvalidArgumentException( __("Group did not `contain` Users.  Please Contain Users"));
		}
	}

	private function deleteMembershipsByUserId( $user_id = null ) {
		if( !$user_id )
			$user_id = $this->Auth->user('user_id');

		$user = $this->Groups->Users->get( $user_id, [
			'contain' => [
				'Groups' => ['Users']
			]
		]);

		if( !$user ) {
			throw new BadRequestException('Unable to look up your user account');
			return;
		}

		foreach( $user->groups as $group ) {
			$this->ensureGroupHasOwner( $group );
		}

		$user->groups = [];

		return $this->Groups->Users->save($user);
	}

	private function canUserViewGroup($group_id, $user_id = null) {


		if( 'admin' == $this->Auth->user('role') )
			return true;

		if( 'committee' == $this->Auth->user('role') )
			return true;

		if( !$user_id )
			$user_id = $this->Auth->user('user_id');

		$user = $this->Groups->Users->get( $user_id, [
			'contain' => [
				'Groups' => [
					'conditions' => [
						'Groups.group_id' => $group_id,
					]
				]
			]
		]);

		return count($user->groups) == 1;

	}

	function me() {

		$user_id = $this->Auth->user('user_id');

		$user = $this->Groups->Users->get( $user_id, [
			'contain' => [ 'Groups' ]
		]);

		if( count($user->groups) > 0 ) {
			return $this->redirect(['action' => 'manage', $user->groups[0]->group_id]);
		} else {
			$this->Flash->error( __('You are not a member of a group at this time') );
			return $this->redirect( ['action' => 'join'] );
		}
	}


	/**
	 * @return \Cake\Network\Response|null
	 */
	function create() {

		if( $this->request->is( ['post', 'put', 'patch'] ) ) {
			$raw = $this->request->getData();
			$raw['join_token'] = strtoupper( substr( sha1( json_encode($raw) . time() ), 0, 5 ) );
			$raw['capacity'] = -1;
			$raw['user_count'] = 1;

			$this->deleteMembershipsByUserId();

			$raw['users'][] = [
				'user_id' => $this->Auth->user('user_id'),
				'_joinData' => [
					'role' => 'owner',
				]
			];

			$group = $this->Groups->newEntity($raw, [
				'user_count' => 1,
				'associated' => [
					'Users._joinData'
				]
			]);

			if(
				( $group = $this->Groups->save( $group ) )
				&& $group->group_id
			) {
				return $this->redirect([
					'action' => 'manage',
					$group->group_id
				]);
			}

		}

	}

	/**
	 * manage
	 * allows a
	 * @param $group_id
	 * @throws ForbiddenException when the logged in user doesn't have permission to manage Group $group_id
	 */
	function manage($group_id) {

		if( $this->canUserViewGroup($group_id) ) {
			$group = $this->Groups->get($group_id, [
				'contain'    => [
					'Users' ,
					'Jobs' => ['SiteLeader']
				]
			] );

			$this->set( compact( 'group' ) );
		} else {
			throw new ForbiddenException( __("You don't have permission to view this group") );
		}

	}

	/**
	 * Moves right group members into left group
	 * @param $left_group_id	surviving group id
	 * @param $right_group_id	
	 */
	function merge() {

		if( $this->request->is(['post', 'patch', 'put']) ) {
			$data = $this->request->getData();
			$left = $this->Groups->get($data['left_group_id'], ['contain' => ['Users']]);
			$right = $this->Groups->get($data['right_group_id'], ['contain' => ['Users']]);

			if( $left && $right ) {
				// easier than the negation
			} else {
				throw new NotFoundException( __('Unable to merge groups {0} and {1}', [$left_group_id, $right_group_id]));
			}

			if( !empty($data['title']) ) {
				$left->title = $data['title'];
			}

			$this->Groups->Users->link($left, $right->users);

			foreach($left->users as $user) {
				$user->_joinData = $this->Groups->Users->Memberships->newEntity();
				$user->_joinData->role = 'member';

				$this->Groups->Users->link($left, [$user]);
			}

			if( $this->Groups->save($left, ['associated' => ['Users']]) && $this->Groups->delete($right) ) {
				$this->Flash->success( __('{0} and {1} groups successfully merged', [$right->title, $left->title] ) );
			}
		}

		$groups = $this->Groups->find('list', [
			'keyField' => 'group_id',
			'valueField' => function($group) {
				return $group->title . " - " . $group->member_count;
			},
			'order' => ['member_count' => "DESC"]
		]);

		$this->set( compact('groups') );

	}

	function split() {
		throw new \Exception('Group splitting is not currently working');
		if( $this->request->is(['put', 'post', 'patch'])) {
			$suffixes = [
				'Alpha',
				'Beta',
				'Gamma',
				'Delta',
				'Epsilon',
				'Zeta',
				'Eta',
				'Theta',
				'Iota',
				'Kappa',
				'Lambda',
				'Mu',
				'Nu',
				'Xi',
				'Omicron',
				'Pi',
				'Rho',
				'Sigma',
				'Tau',
				'Upsilon',
				'Phi',
				'Chi',
				'Psi',
				'Omega'
			];

			$data = $this->request->getData();

			$group = $this->Groups->get($data['group_id'], [
				'contain' => ['Users']
			]);


			// Filling groups of $target_size size3
			if( intval($data['target_size']) ) {
				$pieces = ceil( count($group->users) / intval($data['target_size']) );
				debug( __("Making $pieces groups out of {0} users", count($group->users) ) );
			} else {

			}

			if( $pieces > count($suffixes) ) {
				throw new \Cake\Network\Exception\NotFoundException('Too many groups requested.  Please try a smaller number of pieces.');
			}

			
			if( count($group->users) / $pieces < 2 ) {
				throw new \Cake\Network\Exception\NotFoundException("Cannot divide into $pieces piece(s) as the resulting groups have fewer than two members.");

			}

			$groups = [];

			for($i = 0; $i < $pieces; $i++)
			{
				$title = __("{0} - {1}", $group->title, $suffixes[$i]);
				$groups[] = $this->Groups->newEntity([
					'join_token' => substr( md5( $title . time() ), 0, 6 ),
					'title' => $title,
					'capacity' => -1,
					'users' => []
				]);
			}

			foreach($group->users as $idx => $user) {
				$group_idx = $idx % $pieces;
				unset($user->_joinData->group_id);

				array_push($groups[$group_idx]->users, $user);
			}

			if( $this->Groups->delete( $group ) && $this->Groups->saveMany($groups) ) {
				$this->Flash->success(__("{0} successfully split into {1} groups", [$group->title, count($groups) ] ) );
			}
		}

		$groups = $this->Groups->find('list', [
			'keyField' => 'group_id',
			'valueField' => function($group) {
				return $group->member_count . ' - '. $group->title;
			},
			'order' => ['member_count' => "DESC"]
		]);

		$this->set( compact('groups') );


	}

	private function assignGroupsOfTwo() {}


	private function markDrivers() {

	}

	function join() {
		if( $this->request->is(['put','post', 'patch'])) {

			$this->deleteMembershipsByUserId();

			$group = $this->Groups->find('all', [
				'conditions' => [
					'join_token' => strtoupper( trim( $this->request->getData('join_token') ) ),
					'capacity' => -1
				],
			])->first();

			$user = $this->Groups->Users->get( $this->Auth->user('user_id'), ['contain' => ['Groups']] );

			$newUser = [
				'groups' => [
					[
						'group_id' => $group->group_id,
						'_joinData' => [
							'role' => 'member',
						]
					]
				]
			];

			$user = $this->Groups->Users->patchEntity($user, $newUser, ['associated' => ['Groups']]);

			$result = $this->Groups->Users->save($user);

			if($result) {
				$this->Flash->success( __('You have successfully joined {0}', [$group->title]) );
			} else {
				$this->Flash->error( __('There was an error joining the group') );
			}
		}
	}

	function delete($group_id) {
		if( $this->request->is(['post', 'delete']) ) {
			$group = $this->Groups->get($group_id);

			if( $group && $this->Groups->delete($group) ) {
				$this->Flash->success( __('Group successfully deleted.') );
			}
		}

		return $this->redirect(['action' => 'index']);
	}

	function index() {
		$groups = $this->Groups->find('all')->order(['member_count' => 'ASC']);

		$this->set( compact('groups') );
	}

}
