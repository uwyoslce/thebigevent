<?php
namespace App\Controller;

use Cake\Chronos\Date;
use Cake\Core\Configure;
use App\Controller\AppController;
use Cake\Event\Event;
use Cake\Log\Log;
use Cake\Mailer\Email;

/**
 * Class UsersController
 * @package App\Controller
 * @property    \App\Model\Table\UsersTable    $Users
 */
class UsersController extends AppController
{

	public $paginate = [
        'limit' => 25,
        'order' => [
            'Users.user_id' => 'asc'
        ]
    ];

	public function beforeFilter(Event $event)
	{
		parent::beforeFilter($event);
		$this->Auth->deny();
		$this->Auth->allow(['login', 'logout', 'cas']);

		$ok = @session_start();
		if(!$ok){
			session_regenerate_id(true); // replace the Session ID
			session_start(); 
		}

	}

	public function isAuthorized( $user ) {

		$perms = [
			'me' => [
				'volunteer' => true,
				'committee' => true,
				'admin' => true,
			],
			'participate' => [
				'volunteer' => true,
				'committee' => true,
				'admin' => true,
			],
			'sites' => [
				'admin' => true,
				'committee' => true
			],
			'checkin' => [
				'admin' => true,
				'committee' => true
			],
			'property' => [
				'admin' => true,
				'committee' => true
			],
			'print' => [
				'admin' => true,
				'committee' => true
			]
		];

		if( isset( $perms[ $this->request->getParam('action') ][ $user['role'] ]) ) {
			return $perms[ $this->request->getParam('action') ][ $user['role'] ];
		}

		return parent::isAuthorized( $user ); // TODO: Change the autogenerated stub
	}

	public function checkin() {
		$identity = null;
		if( $this->request->is(['POST']) ) {
			$identity = $this->Users->UserIdentities->find('all', [
				'conditions' => $this->request->getData(),
				'contain' => [
					'Users' => [
						'fields' => [
							'user_id',
							'first_name',
							'last_name',
							'email',
							'phone',
							'shirt_size'
						],
						'Signatures' => [
							'fields' => [
								'signature_id',
								'user_id',
								'document_id',
								'signed',
								'signature_text',
								'created',
								'modified'
							],
							'Documents' => [
								'fields' => [
									'document_id',
									'title'
								]
							]
						],
						'Groups' => [
							'fields' => [
								'Memberships.user_id',
								'group_id',
								'title',
							],
							'Jobs' => [
								'SiteLeader'
							],
							'Users' => [
									'fields' => [
										'Memberships.group_id',
										'first_name',
										'last_name',
										'transportation',
										'vehicle_capacity'
									]
							]
						]
					]
				]
			])->first();

			if( empty($identity) ) {
				throw new \Cake\Network\Exception\NotFoundException( __( "Unable to find a user by identity {0}.", [
						$this->request->getData('identifier')
				] ) );
			} else {
				if( !$identity->user->checked_in ) {

					$identity->user->participating = true;
					$identity->user->checked_in = true;
					if( empty($identity->user->signatures) ) {
						$identity->user->signatures = $this->createUserSignatures($identity->user);
					}
					if( $this->Users->save($identity->user) ) {
						$event = new Event('User.checkedIn', $this, [
							'identity' => $identity
						]);
						$this->eventManager()->dispatch($event);
					}
				}
			}
		}

		$this->set('identity', $identity);
		$this->set('_serialize', ['identity']);
	}

	public function property($user_id) {
		$user = null;
		$success = false;
		if( $this->request->is(['PATCH']) ) {

			$property = $this->request->getData('property');
			$value = $this->request->getData('value');


			$user = $this->Users->get($user_id);

			if( $user && in_array($property, ['first_name', 'last_name', 'phone', 'email']) ) {
				$user->{$property} = $value;
				if( $this->Users->save($user) ) {
					$success = true;
				}
			}
		}
		$this->set('success', $success);
		$this->set('user', $user);
		$this->set('_serialize', ['success', 'user']);
	}

	public function preflight() {
		$this->viewBuilder()->setLayout(false);
		$query = $this->Users->UserIdentities
			->query()
			->where([
				'protocol' => 'token',
				'realm' => 'uwyobigevent.com',
			])
			->contain([
				'Users' => [
					'Signatures' => ['Documents'],
					'Groups' => [
						'Jobs' => ['SiteLeader'],
						'Users' => []
					]
				]
			]);

		$this->set('qr_source', 'link');
		$this->set('identities', $this->paginate($query) );
	}

	public function print($username) {
		$this->viewBuilder()->setLayout(false);
		$identity = $this->Users->UserIdentities->find('all', [
				'conditions' => [
					'identifier' => $username,
					'protocol' => 'cas',
					'realm' => 'bnrcas.uwyo.edu',
				],
				'contain' => [
					'Users' => [
						'Signatures' => ['Documents'],
						'Groups' => [
							'Jobs' => ['SiteLeader'],
							'Users' => []
						]
					]
				]
			])->first();

		if( empty($identity) ) {
			throw new NotFoundException("Unable to find $username");
		}

		$this->set('qr_source', 'link');
		$this->set('identity', $identity);
	}

	public function sites($site_leader_id = null) {

		if(null == $site_leader_id)
			$site_leader_id = $this->Auth->user('user_id');

		$user = $this->Users->get($site_leader_id, [
			'contain' => [
				'SiteLeaderJobs' => [
					'Tools',
					
					'Groups'
				]
			]
		]);

		$this->set( compact('user') );
	}

	public function me() {
		$query = $this->Users->find('all', [
			'conditions' => [
				'Users.user_id' => $this->Auth->user('user_id')
			],
			'contain' => ['UserIdentities', 'Conditions']
		]);
		$user = $query->first();
		if( $this->request->is(['put', 'post', 'patch']) ) {
			$user = $this->Users->patchEntity($user, $this->request->getData());

			if( $this->Users->save($user) ) {

			}
		}
		$conditions = $this->Users->Conditions->find('list');

		$this->set( compact('user', 'conditions') );
	}

	public function participate() {
		$query = $this->Users->find('all', [
			'conditions' => [
				'Users.user_id' => $this->Auth->user('user_id')
			],
			'contain' => ['UserIdentities', 'Conditions']
		]);
		$user = $query->first();

				

		$user->participating = true;
		$user->signatures = $this->createUserSignatures($user);

		$this->Users->save( $user );

		return $this->redirect(['action' => 'me']);
	}

	private function createUserSignatures($user) {
		$Document = \Cake\ORM\TableRegistry::get('Documents');

		$documents = $Document->find('all');

		$signatures = [];
		if( $documents->count() > 0 ) {
			foreach($documents as $document) {
				if( !$this->Users->Signatures->exists([
						'user_id' => $user->user_id,
						'document_id' => $document->document_id
					])
				) {
					$signatures[] = $this->Users->Signatures->newEntity([
						'user' => $user,
						'document_id' => $document->document_id,
						'signed' => false,
						'signature_text' => ""
					]);
				}
			}
		}
		return $signatures;
	}

	public function promote() {
		$users = $this->Users->find('list');

		if( $this->request->is(['put', 'post', 'patch']) ) {
			$user = $this->Users->get($this->request->getData('user_id') );

			if( $user ) {
				$user = $this->Users->patchEntity($user, $this->request->getData());

				if( $this->Users->save($user) ) {
					$this->Flash->success( __("{0} now has the role {1}", [
						$user->username,
						$user->role
					]));
				} else {
					$this->Flash->error( __('Unable to adjust the role of {0}', [$user->username]));
				}
			}

			return $this->redirect(['action' => 'index']);
		}

		$this->set( compact('users') );
	}

	public function cas($mode = 'login', $user_identity_id = null) {

		$cas = Configure::read('CAS');

		\phpCAS::client(
			CAS_VERSION_2_0, 
			$cas['host'], 
			$cas['port'], 
			$cas['context'],
			false
		);


		if( Configure::read('debug') ) {
			\phpCAS::setDebug( LOGS . '/phpCAS.log');
			\phpCAS::setNoCasServerValidation();
		} else {
			// TODO: implement the server certs
			\phpCAS::setNoCasServerValidation();
		}

		$user = null;
		$user_identity = null;

		if( \phpCAS::isAuthenticated() ) {
			$query = $this->Users->UserIdentities->find('all', [
				'conditions' => [
					'protocol' => 'cas',
					'realm' => $cas['host'],
					'identifier' => \phpCAS::getUser()
				],
				'contain' => ['Users']
			]);

			$user_identity = $query->first();
		} else {
			\phpCAS::forceAuthentication();
		}

		switch( trim( strtolower($mode) ) ){

			case 'merge':
				// This identity doesn't exist && user is logged in
				if( null == $user_identity && $this->Auth->user() ) {
					$user = $this->Users->get( $this->Auth->user('user_id') );
					$user->user_identities = [
						$this->Users->UserIdentities->newEntity([
							'protocol' => 'cas',
							'realm' => $cas['host'],
							'identifier' => \phpCAS::getUser()
						])
					];

					if( $this->Users->save($user) )
					{
						//$this->Flash->success('You have successfully connected your accounts');
					}
				}
				break;
			case 'disconnect':
				if( $this->Auth->user() && $this->request->is('post') ) {
					$query = $this->Users->UserIdentities->find('all', [
						'conditions' => [
							'UserIdentities.user_id' => $this->Auth->user('user_id'),
							'UserIdentities.user_identity_id' => $user_identity_id
						]
					]);

					$user_identity = $query->first();

					if( $user_identity && $this->Users->UserIdentities->delete($user_identity) ) {
						//$this->Flash->success('This identity has been disconnected');
					}
				}
				break;
			case 'login':              
				if( \phpCAS::isAuthenticated() ) {			

					if( null == $user_identity ) {
						// create new user and useridentity

						$newUser = $this->Users->newEntity(
							call_user_func_array($cas['user_builder'], [
								\phpCAS::getUser(),
								\phpCAS::getAttributes()
							])
						);
						$newUser->password = hash( 'sha256',  time() . time() . time() );
						$newUser->role = 'volunteer';
						$newUser->time_zone = "America/Denver";

						$newUser->user_identities = [
							$this->Users->UserIdentities->newEntity([
								'protocol' => 'cas',
								'realm' => $cas['host'],
								'identifier' => \phpCAS::getUser()
							])
						];

						$newUser = $this->Users->save($newUser);
						$this->Auth->setUser( $newUser->toArray() );

						$evt = new Event('User.Created', $this, [
							'user' => $newUser
						]);

					} else {
						$this->Auth->setUser( $user_identity->user->toArray() );
					}

					Log::info( __("{0}/{1} authenticated via CAS: {2}@{3} from IP address {4}",[
						$this->Auth->user('user_id'),
						$this->Auth->user('username'),
						\phpCAS::getUser(),
						$cas['host'],
						$_SERVER['REMOTE_ADDR']
					]), 'audit');

				} 
				break;
			case 'logout':
				if( \phpCAS::isAuthenticated() )
				{
					\phpCAS::logout();
				}
				break;
		}        

		return $this->redirect([
			'action' => 'me'
		]);

	}

	 public function index($role = 'all')
	 {
	 	$conditions = [];
	 	if( 'all' != $role ) {
	 		$conditions = ['Users.role' => $role];
	 	}

		$this->set('users', $this->Users->find('all', ['conditions' => $conditions]));
		$this->set('role', $role);
	}

	public function view($id)
	{
		$user = $this->Users->get($id);
		$this->set(compact('user'));
	}

	public function add()
	{
		$user = $this->Users->newEntity();
		if ($this->request->is('post')) {
			$user = $this->Users->patchEntity($user, $this->request->getData());
			$user->role = 'volunteer';
			$user->timeZone = 'America/Denver';
			if ($this->Users->save($user)) {
				$this->Flash->success(__('The user has been saved.'));
				return $this->redirect(['action' => 'add']);
			}
			$this->Flash->error(__('Unable to add the user.'));
		}
		$this->set('user', $user);
	}

	
	public function login()
	{
		if( !$this->Auth->user() ) {
			if ($this->request->is('post')) {
				$user = $this->Auth->identify();
				if ($user) {
					$this->Auth->setUser($user);
					return $this->redirect($this->Auth->redirectUrl());
				}
				$this->Flash->error(__('Invalid username or password, try again'));
			}
		} else {
			return $this->redirect(['action' => 'me']);
		}
	}

	public function logout()
	{
		return $this->redirect($this->Auth->logout());
	}

	private function getTimeZone() {
		$ip = $_SERVER['REMOTE_ADDR'];
		$response = file_get_contents("https://freegeoip.net/json/$ip");
		$decoded = json_decode($response);
		if($decoded->time_zone)
			return $decoded->time_zone;
		else
			return "";
	}

	public function tokens() {
		$CAS = Configure::read('CAS');
		// Create a new bearer token if requested

		if( $this->request->is('POST') ) {
			$identity = $this->Users->UserIdentities->newEntity([
				'user_id' => $this->Auth->user('user_id'),
				'protocol' => 'bearer',
				'realm' => implode('/', [$this->request->host(), 'api']),
				'identifier' => \Cake\Utility\Security::randomString(64)
			]);
			if( $this->Users->UserIdentities->save($identity) ) {
				$this->response->withStatus(201); // created
			}
		}
		
		$identities = $this->Users->UserIdentities->find('all', [
			'conditions' => [
				'user_id' => $this->Auth->user('user_id')
			],
			'order' => [
				'modified' => 'DESC'
			]
		]);

		$this->set('CAS', $CAS);
		$this->set('identities', $identities);
		$this->set('_serialize', ['identities']);
		
	}

}
